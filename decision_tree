#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 19 17:19:51 2021

@author: wangchenxi
"""

from math import log
dataSet=[[0, 0, 0, 0, 'no'],
            [0, 0, 0, 1, 'no'],
            [0, 1, 0, 1, 'yes'],
            [0, 1, 1, 0, 'yes'],
            [0, 0, 0, 0, 'no'],
            [1, 0, 0, 0, 'no'],
            [1, 0, 0, 1, 'no'],
            [1, 1, 1, 1, 'yes'],
            [1, 0, 1, 2, 'yes'],
            [1, 0, 1, 2, 'yes'],
            [2, 0, 1, 2, 'yes'],
            [2, 0, 1, 1, 'yes'],
            [2, 1, 0, 1, 'yes'],
            [2, 1, 0, 2, 'yes'],
            [2, 0, 0, 0, 'no']]
#分割前树的 香农熵
def calcShannonEnt(dataSet):
    #统计数据数量
    numEntries=len(dataSet)
    #存储每个label出现次数
    label_counts={}
    #统计label出现次数
    for featVec in dataSet:
        current_label=featVec[-1]
        if current_label not in label_counts:#提取label信息
            label_counts[current_label]=0#如果label不在dict中则加入
        label_counts[current_label]+=1#label计数
    shannon_ent=0#经验熵
    #计算经验熵
    for key in label_counts:
        prob=float(label_counts[key])/numEntries#即pk
        shannon_ent-=prob*log(prob,2)
    return shannon_ent

print(calcShannonEnt(dataSet))

def SplitDataSet(data_set,axix,value):
    ret_dataset=[]
    for feat_vec in data_set:
        if feat_vec[axis]==value:
            reduced_feat_vec=feat_vec[:axis]
            reduced_feat_vec.extend(feat_vec[axis+1:])
            ret_dataset.append(reduced_feat_vec)
            return ret_dataset

